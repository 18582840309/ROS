// Generated by gencpp from file learing/kissResult.msg
// DO NOT EDIT!


#ifndef LEARING_MESSAGE_KISSRESULT_H
#define LEARING_MESSAGE_KISSRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace learing
{
template <class ContainerAllocator>
struct kissResult_
{
  typedef kissResult_<ContainerAllocator> Type;

  kissResult_()
    : total_kiss_kissed(0)  {
    }
  kissResult_(const ContainerAllocator& _alloc)
    : total_kiss_kissed(0)  {
  (void)_alloc;
    }



   typedef uint32_t _total_kiss_kissed_type;
  _total_kiss_kissed_type total_kiss_kissed;





  typedef boost::shared_ptr< ::learing::kissResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::learing::kissResult_<ContainerAllocator> const> ConstPtr;

}; // struct kissResult_

typedef ::learing::kissResult_<std::allocator<void> > kissResult;

typedef boost::shared_ptr< ::learing::kissResult > kissResultPtr;
typedef boost::shared_ptr< ::learing::kissResult const> kissResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::learing::kissResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::learing::kissResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::learing::kissResult_<ContainerAllocator1> & lhs, const ::learing::kissResult_<ContainerAllocator2> & rhs)
{
  return lhs.total_kiss_kissed == rhs.total_kiss_kissed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::learing::kissResult_<ContainerAllocator1> & lhs, const ::learing::kissResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace learing

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::learing::kissResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::learing::kissResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::learing::kissResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::learing::kissResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::learing::kissResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::learing::kissResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::learing::kissResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b6d67e0f2940c2fcc0bd08f43f03238e";
  }

  static const char* value(const ::learing::kissResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb6d67e0f2940c2fcULL;
  static const uint64_t static_value2 = 0xc0bd08f43f03238eULL;
};

template<class ContainerAllocator>
struct DataType< ::learing::kissResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "learing/kissResult";
  }

  static const char* value(const ::learing::kissResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::learing::kissResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#定义目标结果\n"
"uint32 total_kiss_kissed\n"
;
  }

  static const char* value(const ::learing::kissResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::learing::kissResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.total_kiss_kissed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct kissResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::learing::kissResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::learing::kissResult_<ContainerAllocator>& v)
  {
    s << indent << "total_kiss_kissed: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.total_kiss_kissed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LEARING_MESSAGE_KISSRESULT_H
