// Generated by gencpp from file learing/kissGoal.msg
// DO NOT EDIT!


#ifndef LEARING_MESSAGE_KISSGOAL_H
#define LEARING_MESSAGE_KISSGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace learing
{
template <class ContainerAllocator>
struct kissGoal_
{
  typedef kissGoal_<ContainerAllocator> Type;

  kissGoal_()
    : kiss_id(0)  {
    }
  kissGoal_(const ContainerAllocator& _alloc)
    : kiss_id(0)  {
  (void)_alloc;
    }



   typedef uint32_t _kiss_id_type;
  _kiss_id_type kiss_id;





  typedef boost::shared_ptr< ::learing::kissGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::learing::kissGoal_<ContainerAllocator> const> ConstPtr;

}; // struct kissGoal_

typedef ::learing::kissGoal_<std::allocator<void> > kissGoal;

typedef boost::shared_ptr< ::learing::kissGoal > kissGoalPtr;
typedef boost::shared_ptr< ::learing::kissGoal const> kissGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::learing::kissGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::learing::kissGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::learing::kissGoal_<ContainerAllocator1> & lhs, const ::learing::kissGoal_<ContainerAllocator2> & rhs)
{
  return lhs.kiss_id == rhs.kiss_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::learing::kissGoal_<ContainerAllocator1> & lhs, const ::learing::kissGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace learing

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::learing::kissGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::learing::kissGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::learing::kissGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::learing::kissGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::learing::kissGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::learing::kissGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::learing::kissGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6aea3f8f65c1fe428761a4336efff6c6";
  }

  static const char* value(const ::learing::kissGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6aea3f8f65c1fe42ULL;
  static const uint64_t static_value2 = 0x8761a4336efff6c6ULL;
};

template<class ContainerAllocator>
struct DataType< ::learing::kissGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "learing/kissGoal";
  }

  static const char* value(const ::learing::kissGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::learing::kissGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#定义目标信息\n"
"uint32 kiss_id\n"
;
  }

  static const char* value(const ::learing::kissGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::learing::kissGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.kiss_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct kissGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::learing::kissGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::learing::kissGoal_<ContainerAllocator>& v)
  {
    s << indent << "kiss_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.kiss_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LEARING_MESSAGE_KISSGOAL_H
