// Generated by gencpp from file learing/kissFeedback.msg
// DO NOT EDIT!


#ifndef LEARING_MESSAGE_KISSFEEDBACK_H
#define LEARING_MESSAGE_KISSFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace learing
{
template <class ContainerAllocator>
struct kissFeedback_
{
  typedef kissFeedback_<ContainerAllocator> Type;

  kissFeedback_()
    : kiss_complete(0.0)  {
    }
  kissFeedback_(const ContainerAllocator& _alloc)
    : kiss_complete(0.0)  {
  (void)_alloc;
    }



   typedef float _kiss_complete_type;
  _kiss_complete_type kiss_complete;





  typedef boost::shared_ptr< ::learing::kissFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::learing::kissFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct kissFeedback_

typedef ::learing::kissFeedback_<std::allocator<void> > kissFeedback;

typedef boost::shared_ptr< ::learing::kissFeedback > kissFeedbackPtr;
typedef boost::shared_ptr< ::learing::kissFeedback const> kissFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::learing::kissFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::learing::kissFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::learing::kissFeedback_<ContainerAllocator1> & lhs, const ::learing::kissFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.kiss_complete == rhs.kiss_complete;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::learing::kissFeedback_<ContainerAllocator1> & lhs, const ::learing::kissFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace learing

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::learing::kissFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::learing::kissFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::learing::kissFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::learing::kissFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::learing::kissFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::learing::kissFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::learing::kissFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "908dd8fdbebbc138872a0182e5166b61";
  }

  static const char* value(const ::learing::kissFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x908dd8fdbebbc138ULL;
  static const uint64_t static_value2 = 0x872a0182e5166b61ULL;
};

template<class ContainerAllocator>
struct DataType< ::learing::kissFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "learing/kissFeedback";
  }

  static const char* value(const ::learing::kissFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::learing::kissFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#定义周期反馈信息\n"
"float32 kiss_complete\n"
"\n"
;
  }

  static const char* value(const ::learing::kissFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::learing::kissFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.kiss_complete);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct kissFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::learing::kissFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::learing::kissFeedback_<ContainerAllocator>& v)
  {
    s << indent << "kiss_complete: ";
    Printer<float>::stream(s, indent + "  ", v.kiss_complete);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LEARING_MESSAGE_KISSFEEDBACK_H
